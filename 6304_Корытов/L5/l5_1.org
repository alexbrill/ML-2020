#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+PROPERTY: header-args:python :session *l5*
#+PROPERTY: header-args:python+ :exports both
#+PROPERTY: header-args:python+ :tangle yes

#+begin_src elisp :exports none
(setq-local org-image-actual-width '(1024))
(setq-local org-html-htmlize-output-type 'css)
(setq-local org-latex-listings 'minted)
#+end_src

#+RESULTS:
: minted

* Загрузка данных
#+begin_src python :display plain
from IPython.display import display
from matplotlib import pyplot as plt
import matplotlib as mpl
import pandas as pd
import numpy as np
import tabulate

mpl.rcParams['figure.dpi'] = 200
mpl.rcParams['figure.facecolor'] = '1'

tabulate._table_formats['booktabs_raw'] = tabulate._table_formats['latex_booktabs']._replace(**{
        'headerrow': tabulate._table_formats['latex_raw'].headerrow,
        'datarow': tabulate._table_formats['latex_raw'].datarow,
    })

data = pd.read_csv('../data/iris.data', header=None)

with open('./output/data.txt', 'w') as f:
    f.write(str(data))

data
#+end_src

#+RESULTS:
#+begin_example
         0    1    2    3               4
  0    5.1  3.5  1.4  0.2     Iris-setosa
  1    4.9  3.0  1.4  0.2     Iris-setosa
  2    4.7  3.2  1.3  0.2     Iris-setosa
  3    4.6  3.1  1.5  0.2     Iris-setosa
  4    5.0  3.6  1.4  0.2     Iris-setosa
  ..   ...  ...  ...  ...             ...
  145  6.7  3.0  5.2  2.3  Iris-virginica
  146  6.3  2.5  5.0  1.9  Iris-virginica
  147  6.5  3.0  5.2  2.0  Iris-virginica
  148  6.2  3.4  5.4  2.3  Iris-virginica
  149  5.9  3.0  5.1  1.8  Iris-virginica

  [150 rows x 5 columns]
#+end_example

#+begin_src python :display plain
no_labeled_data = data.drop(4, axis=1)
no_labeled_data
#+end_src

#+RESULTS:
#+begin_example
         0    1    2    3
  0    5.1  3.5  1.4  0.2
  1    4.9  3.0  1.4  0.2
  2    4.7  3.2  1.3  0.2
  3    4.6  3.1  1.5  0.2
  4    5.0  3.6  1.4  0.2
  ..   ...  ...  ...  ...
  145  6.7  3.0  5.2  2.3
  146  6.3  2.5  5.0  1.9
  147  6.5  3.0  5.2  2.0
  148  6.2  3.4  5.4  2.3
  149  5.9  3.0  5.1  1.8

  [150 rows x 4 columns]
#+end_example

* K-means
#+begin_src python 
from sklearn.cluster import KMeans

k_means = KMeans(init='k-means++', n_clusters=3, n_init=15)
k_means.fit(no_labeled_data)
#+end_src

#+RESULTS:
: KMeans(n_clusters=3, n_init=15)

#+begin_src python
from sklearn.metrics.pairwise import pairwise_distances_argmin
k_means_cluster_centers = k_means.cluster_centers_
k_means_labels = pairwise_distances_argmin(no_labeled_data, k_means_cluster_centers)
display(k_means_cluster_centers)
display(k_means_labels)
#+end_src

#+RESULTS:
:RESULTS:
: array([[5.9016129 , 2.7483871 , 4.39354839, 1.43387097],
:        [5.006     , 3.418     , 1.464     , 0.244     ],
:        [6.85      , 3.07368421, 5.74210526, 2.07105263]])
: array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
:        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
:        1, 1, 1, 1, 1, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
:        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
:        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2,
:        2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2,
:        2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0])
:END:

** Попарная классификация
#+begin_src python :file img/pairs.png
def plot_k(k_means_cluster_centers, k_means_labels):
    f, axes = plt.subplots(1, 3, figsize=(12, 4))
    colors = ['#4EACC5', '#FF9C34', '#4E9A06']
    
    for i in range(3):
        my_members = k_means_labels == i
        cluster_center = k_means_cluster_centers[i]
        for j in range(3):
            axes[j].plot(
                no_labeled_data.loc[my_members][j],
                no_labeled_data[my_members][j+1],
                markerfacecolor=colors[i],
                markeredgecolor=colors[i],
                marker='o',
                markersize=4,
                lw=0
            )
            axes[j].plot(
                cluster_center[j], cluster_center[j+1],
                'o',
                markerfacecolor=colors[i],
                markeredgecolor='k',
                markersize=8
            )

plot_k(k_means_cluster_centers, k_means_labels)
#+end_src

#+RESULTS:
[[file:img/pairs.png]]

** Карта области значений с уменьшением размерности
#+begin_src python :file img/area.png
from sklearn.decomposition import PCA

pca = PCA(n_components=2)
reduced_data = pca.fit_transform(no_labeled_data)

k_means_r = KMeans(init='k-means++', n_clusters=3, n_init=15)
k_means_r.fit(reduced_data)

h = .02
x_min, x_max = reduced_data[:, 0].min() - 1, reduced_data[:, 0].max() + 1
y_min, y_max = reduced_data[:, 1].min() - 1, reduced_data[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))

Z = k_means_r.predict(np.c_[xx.ravel(), yy.ravel()])

Z = Z.reshape(xx.shape)
plt.figure(figsize=(6, 4))
plt.clf()
plt.imshow(Z, interpolation='nearest',
           extent=(xx.min(), xx.max(), yy.min(), yy.max()),
           cmap=plt.cm.Paired,
           aspect='auto', origin='lower')
           
plt.plot(reduced_data[:, 0], reduced_data[:, 1], 'k.', markersize=2)
centroids = k_means_r.cluster_centers_
plt.scatter(centroids[:, 0], centroids[:, 1],
            marker='x', s=169, linewidths=3,
            color='w', zorder=10)
plt.title('K-means clustering on the iris dataset (PCA-reduced data)\n'
          'Centroids are marked with white cross')
plt.xlim(x_min, x_max)
plt.ylim(y_min, y_max)

pass
#+end_src

#+RESULTS:
[[file:img/area.png]]
** Проверка с init
#+begin_src python
def align_labels(labels, centers):
    labels_map = {}
    labels_map_r = {}
    new_labels = []
    i = 0
    for label in labels:
        try:
            l = labels_map[label]
        except KeyError:
            labels_map[label] = i
            labels_map_r[i] = label
            l = i
            i += 1
        new_labels.append(l)
    
    new_centers = []
    for i, center in enumerate(centers):
        new_centers.append(centers[labels_map_r[i]])
    return np.array(new_labels), np.array(new_centers)

display(align_labels([0, 1, 2, 3], ['a', 'b', 'c', 'd']))
display(align_labels([1, 0, 2, 3], ['b', 'a', 'c', 'd']))
display(align_labels([3, 2, 1, 0], ['b', 'a', 'c', 'd']))
#+end_src

#+RESULTS:
:RESULTS:
| array | ((0 1 2 3)) | array | ((a b c d) dtype= <U1) |
| array | ((0 1 2 3)) | array | ((a b c d) dtype= <U1) |
| array | ((0 1 2 3)) | array | ((d c a b) dtype= <U1) |
:END:

#+begin_src python :file img/init.png
PARAMS = np.array([
    [
        { 'init': 'random', 'n_init': 15, 'max_iter': 300 }
    ] * 3,
    [
        { 'init': 'random', 'n_init': 1, 'max_iter': 5 }
    ] * 3,
    [
        { 'init': np.array([[0, 0, 0, 0], [1, 1, 1, 1], [2, 2, 2, 2]]) },
        { 'init': np.array([[1e3, 1e3, 1e3, 1e3], [2e3, 2e3, 2e3, 2e3], [4e3, 4e3, 4e3, 4e3]]) },
        { 'init': np.array([[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]) }
    ]
])

fig, axes = plt.subplots(*PARAMS.shape, figsize=(12, 8))

V = 0

for x in range(PARAMS.shape[0]):
    for y in range(PARAMS.shape[1]):
        km = KMeans(n_clusters=3, **PARAMS[x][y])
        km.fit(no_labeled_data)
        
        centers = km.cluster_centers_
        labels = pairwise_distances_argmin(no_labeled_data, centers)
        labels, centers = align_labels(labels, centers)
        axes[x][y].set_title(str(PARAMS[x][y]))
        for i in range(3):
            my_members = labels == i
            center = centers[i]
            axes[x][y].plot(
                no_labeled_data.loc[my_members][V],
                no_labeled_data[my_members][V + 1],
                markerfacecolor=colors[i],
                markeredgecolor=colors[i],
                marker='o',
                markersize=4,
                lw=0
            )
            axes[x][y].plot(
                center[V], center[V + 1],
                'o',
                markerfacecolor=colors[i],
                markeredgecolor='k',
                markersize=8
            )
            
fig.tight_layout()
#+end_src

#+RESULTS:
:RESULTS:
: /home/pavel/Programs/miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:42: RuntimeWarning: Explicit initial center position passed: performing only one init in k-means instead of n_init=10
: /home/pavel/Programs/miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:42: RuntimeWarning: Explicit initial center position passed: performing only one init in k-means instead of n_init=10
: /home/pavel/Programs/miniconda3/lib/python3.7/site-packages/ipykernel_launcher.py:42: RuntimeWarning: Explicit initial center position passed: performing only one init in k-means instead of n_init=10
[[file:img/init.png]]
:END:
** Метод локтя
#+begin_src python :file img/elbow.png
wcss = []

for i in range(1, 6):
    km = KMeans(n_clusters=i)
    km.fit_predict(no_labeled_data)
    wcss.append(km.inertia_)
    
fig, ax = plt.subplots(figsize=(6, 4))
ax.plot(range(1, 6), wcss, marker='.')
ax.set_xticks(range(1, 6))
ax.grid()
#+end_src

#+RESULTS:
[[file:img/elbow.png]]
** Пакетная кластеризация
#+begin_src python :file img/bkm.png
from sklearn.cluster import MiniBatchKMeans

bkm = MiniBatchKMeans(n_clusters=3, batch_size=100, n_init=1)
bkm.fit(no_labeled_data)

bkm_centers = bkm.cluster_centers_
bkm_labels = pairwise_distances_argmin(no_labeled_data, bkm_centers)

bkm_labels, bkm_centers = align_labels(bkm_labels, bkm_centers)

plot_k(bkm_centers, bkm_labels)
#+end_src

#+RESULTS:
:RESULTS:
: array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
:        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
:        1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
:        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
:        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 0, 0, 0, 0, 2, 0, 0, 0,
:        0, 0, 0, 2, 2, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0,
:        0, 2, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 2, 0, 0, 2])
: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
:        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
:        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
:        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
:        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2,
:        2, 2, 2, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 1, 1, 2, 2, 2, 2,
:        2, 1, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 1])
[[file:img/bkm.png]]
:END:

#+begin_src python :file img/km.png
km = KMeans(n_clusters=3)
km.fit(no_labeled_data)

km_centers = km.cluster_centers_
km_labels = pairwise_distances_argmin(no_labeled_data, km_centers)

km_labels, km_centers = align_labels(km_labels, km_centers)

plot_k(km_centers, km_labels)
#+end_src

#+RESULTS:
[[file:img/km.png]]

#+begin_src python :file img/diff.png
diff_labels = np.array([
    km_label != bkm_label
    for km_label, bkm_label in zip(km_labels, bkm_labels)
])

fig, axes = plt.subplots(1, 3, figsize=(12, 4))
colors = ['#4EACC5', '#FF9C34', '#4E9A06']

for i in range(3):
    axes[i].plot(
        no_labeled_data[diff_labels][i],
        no_labeled_data[diff_labels][i+1],
        markerfacecolor='r',
        markeredgecolor='r',
        markersize=4,
        marker='o',
        lw=0
    )
    axes[i].plot(
        no_labeled_data[~diff_labels][i],
        no_labeled_data[~diff_labels][i+1],
        markerfacecolor='0.5',
        markeredgecolor='0.5',
        markersize=4,
        marker='o',
        lw=0
    )

    
#+end_src

#+RESULTS:
[[file:img/diff.png]]
