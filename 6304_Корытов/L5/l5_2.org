#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="https://gongzhitaao.org/orgcss/org.css"/>
#+PROPERTY: header-args:python :session *l5*
#+PROPERTY: header-args:python+ :exports both
#+PROPERTY: header-args:python+ :tangle yes

#+begin_src elisp :exports none
(setq-local org-image-actual-width '(1024))
(setq-local org-html-htmlize-output-type 'css)
(setq-local org-latex-listings 'minted)
#+end_src

#+RESULTS:
: minted

* Загрузка данных
#+begin_src python :display plain
from IPython.display import display
from matplotlib import pyplot as plt
import matplotlib as mpl
import pandas as pd
import numpy as np
import tabulate

mpl.rcParams['figure.dpi'] = 200
mpl.rcParams['figure.facecolor'] = '1'

tabulate._table_formats['booktabs_raw'] = tabulate._table_formats['latex_booktabs']._replace(**{
        'headerrow': tabulate._table_formats['latex_raw'].headerrow,
        'datarow': tabulate._table_formats['latex_raw'].datarow,
    })

data = pd.read_csv('../data/iris.data', header=None)

with open('./output/data.txt', 'w') as f:
    f.write(str(data))

data
#+end_src

#+RESULTS:
#+begin_example
         0    1    2    3               4
  0    5.1  3.5  1.4  0.2     Iris-setosa
  1    4.9  3.0  1.4  0.2     Iris-setosa
  2    4.7  3.2  1.3  0.2     Iris-setosa
  3    4.6  3.1  1.5  0.2     Iris-setosa
  4    5.0  3.6  1.4  0.2     Iris-setosa
  ..   ...  ...  ...  ...             ...
  145  6.7  3.0  5.2  2.3  Iris-virginica
  146  6.3  2.5  5.0  1.9  Iris-virginica
  147  6.5  3.0  5.2  2.0  Iris-virginica
  148  6.2  3.4  5.4  2.3  Iris-virginica
  149  5.9  3.0  5.1  1.8  Iris-virginica

  [150 rows x 5 columns]
#+end_example

#+begin_src python :display plain
no_labeled_data = data.drop(4, axis=1)
no_labeled_data
#+end_src

#+RESULTS:
#+begin_example
         0    1    2    3
  0    5.1  3.5  1.4  0.2
  1    4.9  3.0  1.4  0.2
  2    4.7  3.2  1.3  0.2
  3    4.6  3.1  1.5  0.2
  4    5.0  3.6  1.4  0.2
  ..   ...  ...  ...  ...
  145  6.7  3.0  5.2  2.3
  146  6.3  2.5  5.0  1.9
  147  6.5  3.0  5.2  2.0
  148  6.2  3.4  5.4  2.3
  149  5.9  3.0  5.1  1.8

  [150 rows x 4 columns]
#+end_example

* Иерархическая кластеризация
#+begin_src python
from sklearn.cluster import AgglomerativeClustering

hier = AgglomerativeClustering(n_clusters=3, linkage='average')
hier = hier.fit(no_labeled_data)
hier_labels = hier.labels_

display(hier_labels)
#+end_src

#+RESULTS:
: array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
:        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
:        1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
:        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
:        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 2, 2, 2, 0, 2, 2, 2,
:        2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2,
:        2, 0, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 2, 0, 2, 2, 0])

** Результаты
#+begin_src python :file img/hier.png
fig, axes = plt.subplots(1, 3, figsize=(12, 4))

colors = ['#4EACC5', '#FF9C34', '#4E9A06', '#9A060F', '0.1']

for i in range(3):
    my_members = hier_labels == i
    for j in range(3):
        axes[j].plot(
            no_labeled_data[my_members][j],
            no_labeled_data[my_members][j+1],
            'w',
            markerfacecolor=colors[i],
            marker='o',
            markersize=4,
            lw=0
        )
#+end_src

#+RESULTS:
[[file:img/hier.png]]

** Разные размеры кластеров
#+begin_src python :file img/hier_n_clusters.png
fig, axes = plt.subplots(3, 4, figsize=(10, 5))

for n_clusters in range(2, 6):
    h = AgglomerativeClustering(n_clusters=n_clusters, linkage='average')
    h = h.fit(no_labeled_data)
    h_labels = h.labels_
    
    for i in range(n_clusters):
        my_members = h_labels == i
        axes[0][n_clusters - 2].set_title(f'Кластеров: {n_clusters}')
        for j in range(3):
            axes[j][n_clusters - 2].plot(
                no_labeled_data[my_members][j],
                no_labeled_data[my_members][j+1],
                'w',
                markerfacecolor=colors[i],
                marker='o',
                markersize=4,
                lw=0
            )

fig.tight_layout()
#+end_src

#+RESULTS:
[[file:img/hier_n_clusters.png]]

** Дендрограмма
#+begin_src python :file img/dengrogram.png
from scipy.cluster.hierarchy import dendrogram

def plot_dendrogram(model, **kwargs):
    # Create linkage matrix and then plot the dendrogram

    # create the counts of samples under each node
    counts = np.zeros(model.children_.shape[0])
    n_samples = len(model.labels_)
    for i, merge in enumerate(model.children_):
        current_count = 0
        for child_idx in merge:
            if child_idx < n_samples:
                current_count += 1  # leaf node
            else:
                current_count += counts[child_idx - n_samples]
        counts[i] = current_count

    linkage_matrix = np.column_stack([model.children_, model.distances_,
                                      counts]).astype(float)

    # Plot the corresponding dendrogram
    dendrogram(linkage_matrix, **kwargs)
    
model = AgglomerativeClustering(distance_threshold=0, n_clusters=None)
model = model.fit(no_labeled_data)

fig, ax = plt.subplots(1, 1, figsize=(6, 4))

plot_dendrogram(model, truncate_mode='level', p=5, ax=ax)
#+end_src

#+RESULTS:
[[file:img/dengrogram.png]]

* Кольца
#+begin_src python
import random
import math
data1 = np.zeros([250,2])
for i in range(250):
    r = random.uniform(1, 3)
    a = random.uniform(0, 2 * math.pi)
    data1[i,0] = r * math.sin(a)
    data1[i,1] = r * math.cos(a)

data2 = np.zeros([500,2])
for i in range(500):
    r = random.uniform(5, 9)
    a = random.uniform(0, 2 * math.pi)
    data2[i,0] = r * math.sin(a)
    data2[i,1] = r * math.cos(a)

data = np.vstack((data1, data2))

display(data)
#+end_src

#+RESULTS:
: array([[-0.54729402, -1.14268356],
:        [-1.32483991,  1.21099134],
:        [ 1.76587619,  2.22396402],
:        ...,
:        [-2.71247103, -4.43659556],
:        [-2.2925305 , -7.22401915],
:        [ 4.97533705,  4.05580533]])

** Кластеризация
#+begin_src python
r_hier = AgglomerativeClustering(n_clusters=2, linkage='ward')
r_hier = r_hier.fit(data)
r_hier_labels = r_hier.labels_
#+end_src

#+RESULTS:

#+begin_src python :file img/ring.png
fig, ax = plt.subplots(1, 1, figsize=(6, 4))

def plot_rings(ax, data, labels):
    my_members = labels == 0
    ax.plot(data[my_members, 0], data[my_members, 1], 'w', marker='o', 
    markersize=4, color='red',linestyle='None')
    my_members = labels == 1
    ax.plot(data[my_members, 0], data[my_members, 1], 'w', marker='o', 
    markersize=4, color='blue',linestyle='None')

plot_rings(ax, data, r_hier_labels)
#+end_src

#+RESULTS:
[[file:img/ring.png]]

** lingkage
#+begin_src python :file img/linkage.png
PARAMS = [
    { 'linkage': 'ward' },
    { 'linkage': 'complete' },
    { 'linkage': 'average' },
    { 'linkage': 'single' }
]

fig, axes = plt.subplots(1, len(PARAMS), figsize=(12, 3))

for i, params in enumerate(PARAMS):
    h = AgglomerativeClustering(n_clusters=2, **params)
    h = h.fit(data)
    plot_rings(axes[i], data, h.labels_)
    axes[i].set_title(str(params))

fig.tight_layout()
#+end_src

#+RESULTS:
[[file:img/linkage.png]]
